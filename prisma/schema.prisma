// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
    firstName  String   @map("first_name")
    secondName String   @map("second_name")

    email         String   @unique
    password      String
    phoneNumber   String   @map("phone_number")
    country       String
    birthDate     DateTime @map("birth_data")
    biologicalSex Sex      @default(Male)

    appointments Appointment[]
    reviews      Review[]

    @@map("user")
}

enum Sex {
    Male
    Female
}

model Doctor {
    id         String @id @default(cuid())
    firstName  String @map("first_name")
    secondName String @map("second_name")

    image              String?
    verificationStatus Boolean @default(true) @map("verification_status")
    country            String
    speciality         String
    consultations      Int     @default(0)
    experianceYears    Float   @map("experiance_years")
    about              String
    score              Float   @default(0)

    appointments   Appointment[]
    experiences    Experience[]
    educations     Education[]
    certifications Certification[]
    doctorServices DoctorService[]
    doctorDiseases DoctorDisease[]
    reviews        Review[]

    @@map("doctor")
}

model Appointment {
    id String @id @default(cuid())

    user     User   @relation(fields: [userID], references: [id])
    userID   String @map("user_id")
    doctor   Doctor @relation(fields: [doctorId], references: [id])
    doctorId String @map("doctor_id")

    userFirstName    String             @map("user_first_name")
    userSecondName   String             @map("user_second_name")
    doctorFirstName  String             @map("doctor_first_name")
    doctorSecondName String             @map("doctor_second_name")
    data             DateTime
    timeStart        DateTime           @map("time_start")
    timeEnd          DateTime           @map("time_end")
    adress           String?
    price            Float
    type             ConsultationType   @default(Live)
    status           ConsultationStatus @default(Upcoming)

    @@map("appointment")
}

enum ConsultationType {
    Video
    Live
}

enum ConsultationStatus {
    Upcoming
    Done
    Cancel
}

model Experience {
    id String @id @default(cuid())

    doctor   Doctor @relation(fields: [doctorId], references: [id])
    doctorId String @map("doctor_id")

    name       String
    speciality String
    country    String
    city       String

    @@map("experience")
}

model Education {
    id String @id @default(cuid())

    doctor   Doctor @relation(fields: [doctorId], references: [id])
    doctorId String @map("doctor_id")

    university         String
    faculty            String
    dataStart          DateTime @map("data_start")
    dataEnd            DateTime @map("data_end")
    verificationStatus Boolean  @default(true) @map("verification_status")

    @@map("education")
}

model Certification {
    id String @id @default(cuid())

    doctor   Doctor @relation(fields: [doctorId], references: [id])
    doctorId String @map("doctor_id")

    university         String
    faculty            String
    dataStart          DateTime @map("data_start")
    dataEnd            DateTime @map("data_end")
    verificationStatus Boolean  @default(true) @map("verification_status")

    @@map("certification")
}

model Service {
    id String @id @default(cuid())

    name  String
    price Float

    doctorServices DoctorService[]

    @@map("service")
}

model DoctorService {
    id String @id @default(cuid())

    doctor    Doctor  @relation(fields: [doctorId], references: [id])
    doctorId  String  @map("doctor_id")
    service   Service @relation(fields: [serviceId], references: [id])
    serviceId String  @map("service_id")

    @@map("doctor_service")
}

model Disease {
    id String @id @default(cuid())

    name String

    doctorDiseases DoctorDisease[]

    @@map("disease")
}

model DoctorDisease {
    id String @id @default(cuid())

    doctor    Doctor  @relation(fields: [doctorId], references: [id])
    doctorId  String  @map("doctor_id")
    disease   Disease @relation(fields: [diseaseId], references: [id])
    diseaseId String  @map("disease_id")

    @@map("doctor_disease")
}

model Review {
    id String @id @default(cuid())

    user     User   @relation(fields: [userID], references: [id])
    userID   String @map("user_id")
    doctor   Doctor @relation(fields: [doctorId], references: [id])
    doctorId String @map("doctor_id")

    userFirstName  String   @map("user_first_name")
    userSecondName String   @map("user_second_name")
    data           DateTime @default(now())
    score          Int
    comment        String

    @@map("review")
}
